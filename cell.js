// Generated by LiveScript 1.2.0
(function(){
  var Live, through, Cell;
  Live = require('./');
  through = require('through2');
  Cell = (function(superclass){
    var prototype = extend$((import$(Cell, superclass).displayName = 'Cell', Cell), superclass).prototype, constructor = Cell;
    function Cell(val, force){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.val = val;
      force == null && (force = true);
      Cell.superclass.call(this$);
      this$.on('newListener', function(name, fn){
        if (name === 'val') {
          return fn(this$.get());
        }
      });
      if (force) {
        this$._set(this$.val);
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._get = function(){
      return this.val;
    };
    prototype._set = function(val){
      return this._localUpdate(val);
    };
    prototype._getKey = function(key){
      return Live.get(this.get(), key);
    };
    prototype._setKey = function(key, val){
      return Live.set(this.get(), key, val);
    };
    prototype._applyUpdate = function(u){
      var oldVal, source, time, newVal;
      oldVal = this.val;
      source = u.source, time = u.time, newVal = u.data;
      this._lastUpdate = u;
      if (newVal !== oldVal) {
        this.emit('prechange', newVal, oldVal);
        this.val = newVal;
        this.emit('changed', newVal, oldVal);
        this.emit('val', newVal, oldVal);
      }
      return true;
    };
    prototype.history = function(){
      return [this._lastUpdate];
    };
    prototype._pipeStream = function(opts){
      if (typeof opts.mapper !== 'function') {
        opts.mapper = function(it){
          return it;
        };
      }
      if (typeof opts.filter !== 'function') {
        opts.filter = function(){
          return true;
        };
      }
      return through.obj(function(u, arg$, done){
        if (opts.filter(u.data)) {
          this.push({
            source: u.source,
            time: u.time,
            data: opts.mapper(u.data)
          });
        }
        return done();
      });
    };
    return Cell;
  }(Live));
  module.exports = Cell;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
